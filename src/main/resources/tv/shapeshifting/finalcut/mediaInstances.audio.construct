PREFIX nsl: <http://shapeshifting.tv/ontology/nsl#>
PREFIX production: <http://shapeshifting.tv/ontology/production#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX owl: <http://www.w3.org/2002/07/owl#> 
PREFIX f: <java:tv.shapeshifting.nsl.functions.> 

CONSTRUCT { 
	?temporalAnnotation rdf:type nsl:TemporalAnnotation , owl:NamedIndividual ;
		nsl:type "core.inOutTime" ;
		nsl:beginTime ?contentIn ;
		nsl:endTime ?contentOut ;
		nsl:name "" .	
		
	?mediaItem rdf:type nsl:MediaItem , owl:NamedIndividual ;
		rdfs:label ?name ;
		nsl:hasMediaContent ?content ;
		nsl:hasTemporalAnnotation ?temporalAnnotation ;
		nsl:hasRelativeIn ?markerIn ; 
		nsl:hasRelativeOut ?markerOut ;
		nsl:contains ?type .

} WHERE {
	?content rdf:type nsl:MediaContent ;
		nsl:hasType ?contentType ;
		nsl:hasRelativeIn ?rin ; 
		nsl:hasRelativeOut ?rout .
	FILTER( regex( ?contentType, "audio", "i" ) ) .
	
	?song a production:Song ;
		rdfs:label ?songLabel ;
		nsl:hasRelativeIn ?songIn ;
		nsl:hasRelativeOut ?songOut .
	FILTER( ?rin <= ?songIn && ?songOut <= ?rout ).
			
	BIND( ?songLabel AS ?name ) .
	BIND( xsd:long(?songIn - ?rin) AS ?contentIn ) .
	BIND( xsd:long(?songOut - ?rin) AS ?contentOut ) .	
	BIND( iri(concat('production:', f:uuid())) AS ?mediaItem ) .
	BIND( iri(concat('production:', f:uuid())) AS ?temporalAnnotation ) .
	
	?type rdfs:label ?itemType FILTER regex(?itemType, ?contentType, "i") .	
}

